---
import Git from "@/icons/git.astro";
import Arrow from "@/icons/Arrow.astro";
import Section from "./Section.astro";
import { projects } from "@/data/cv.json";
import HTML from "@/icons/html.astro"
import CSS from "@/icons/css.astro"
import JavaScript from "@/icons/javascript.astro"
import TypeScript from "@/icons/type.astro"
import React from "@/icons/react.astro"
import Node from "@/icons/node.astro"
import MySQL from "@/icons/sql.astro"
import GitHub from "@/icons/GitHub.astro"
import Tailwind from "@/icons/tailwind.astro"
import Next from "@/icons/next.astro"
import PostgreSQL from "@/icons/PostgreSQL.astro"
import Supabase from "@/icons/Supabase.astro"
import MongoDB from "@/icons/MongoDB.astro"
import { default as AstroIcon } from "@/icons/Astro.astro"

const SKILLS_ICONS: Record<string, any> = {
  HTML,
  CSS,
  "Styled Components": CSS,
  "CSS Modules": CSS,
  JavaScript,
  APIS: JavaScript,
  TypeScript,
  React,
  Node,
  MySQL,
  Git,
  GitHub,
  Next,
  Tailwind,
  PostgreSQL,
  Supabase,
  MongoDB,
  Astro: AstroIcon
}
---

<Section id="projects" className={Astro.props.className} title="Proyectos">
	<div class="flex flex-col gap-5 group">
		{
			projects.map(({ url, img, description, highlights: skills, name, github }) => {
				return (
					<button data-project-button={url} id={name} role="contentinfo" class="md:hover:ring-[rgb(var(--muted))] ring-[rgb(var(--muted))] md:ring-transparent relative flex flex-col-reverse md:flex-row justify-start items-start rounded-md p-5 md:hover:shadow-sm shadow-sm md:shadow-none md:hover:ring-1 ring-1 md:ring-0 md:hover:bg-[rgb(var(--color-button-muted))]/50 bg-[rgb(var(--color-button-muted))]/50 md:bg-transparent md:group-hover:opacity-40 md:hover:!opacity-100 gap-5 transition-all duration-300 group/item cursor-pointer">
            <img src={img} alt={name} class="aspect-video object-cover rounded border-2 border-[rgb(var(--muted))]/10 transition group-hover/item:border-[rgb(var(--muted))]/30 md:w-32 overflow-hidden" />
						<div class="flex flex-col flex-1">
              <div class="flex justify-between items-center relative w-full">
                <div class="group-hover/item:text-skin-hue flex items-center gap-[6px] text-base decoration-dotted underline-offset-[5px]" title={`Ver ${name}`}>
                  {name}
                  <span class=" transition ease-linear group-hover/item:-translate-y-0.5 group-hover/item:translate-x-0.5 group-hove/itemr:text-skin-hue">
                    <Arrow />
                  </span>
                </div>
                
                <a href={github} target="_blank" rel="noopener" title={`Ver el repositorio de ${name} en GitHub`} class="opacity-75 transition-opacity duration-200 hover:opacity-100 hover:text-skin-hue cursor-pointer z-50">
                  <Git width="19" height="19" />
                </a>
              </div>
						  
              <p class="py-3 text-skin-muted mb-1 -mt-1 text-left">{description}</p>

              <ul class="flex print:hidden flex-wrap gap-2" aria-label="Technologies used">
                {skills.map(skill => {
                  let iconName = skill === "Next.js" ? "Next" : skill
                  iconName = skill === "Tailwind CSS" ? "Tailwind" : iconName

                  const Icon = SKILLS_ICONS[iconName]
                  return (
                    <li class="bg-[rgb(var(--color-button-accent))]/10 border-[rgb(var(--color))]/20 text-skin-hue print:p-0 print:bg-transparent print:text-zinc-800 flex gap-1 items-center border-solid print:border-none border rounded-md px-2 py-0.5 text-xs">
                      {Icon && <Icon />} <span>{skill}</span>
                    </li>
                  )
                })}
              </ul>
						</div>
					</button>
				)
			})
		}
	</div>
</Section>

<style>
  @reference "../styles/global.css";

	ul {
		@apply list-disc space-y-1;
	}

	footer {
		display: flex;
		flex-wrap: wrap;
		gap: 4px;
		font-size: 0.6rem;
	}

	footer span {
		border-radius: 6px;
		background: #eee;
		color: #444;
		font-size: 0.6rem;
		font-weight: 500;
		padding: 0.2rem 0.6rem;
	}
	@keyframes flicker {
		0% {
			opacity: 1;
		}
		50% {
			opacity: 0.25;
		}
		100% {
			opacity: 1;
		}
	}
</style>

<script>
  const buttons = document.querySelectorAll('[data-project-button]');

  buttons.forEach((button) => {
    button.addEventListener('click', (e) => {
      const target = e.target as HTMLElement; 
      
      if (!!target.closest("a")) return;

      const btn = target.closest("button");
      if (!btn) return; 

      const url = btn.getAttribute("data-project-button"); 
      if (url) window.open(url, "_blank");
    });
  });
</script>
